{
    "id": "ibm.devops.services.pipeline.maven.build.deploy.devops_insights",
    "version": 1,
    "name_key": "ExtName",
    "desc_key": "ExtDesc",
    "extension_type": "Build",
    "message_key": "ExtMessage",
    "inputs": [
        {
            "type": "Artifacts",
            "inclusion" : "always"
        }
    ],
    "params": [
        {
            "name": "SERVICE_INSTANCE",
            "type": "Text",
            "required": false,
            "default_value": "(default)",
            "label_key": "SERVICE_INSTANCE_KEY",
            "desc_key": "SERVICE_INSTANCE_DESC"
        },
        {
            "name": "SERVICE_INSTANCE_TYPE",
            "type": "Select",
            "required": "false",
            "default_value": "nexus",
            "label_key": "SERVICE_INSTANCE_TYPE_KEY",
            "desc_key": "SERVICE_INSTANCE_TYPE_DESC",
            "options": [
                {
                    "label_key": "NEXUS_KEY",
                    "value": "nexus"
                },
                {
                    "label_key": "ARTIFACTORY_KEY",
                    "value": "artifactory"
                }
            ]
        },
        {
            "name": "SONAR_SERVICE_INSTANCE",
            "type": "Text",
            "required": false,
            "default_value": "(default)",
            "label_key": "SONAR_SERVICE_INSTANCE_KEY",
            "desc_key": "SONAR_SERVICE_INSTANCE_DESC"
       },
       {
            "name": "BUILD_COMMAND",
            "type": "TextArea",
            "required": false,
            "default_value": "#!/bin/bash\n# environment variables are available:\n# MAVEN_NAME: name of the service instance\n# MAVEN_USER_ID: userid for the maven repository\n# MAVEN_TOKEN: the token or password for the maven repository\n# MAVEN_SNAPSHOT_URL: the maven snapshot repository\n# MAVEN_RELEASE_URL: the maven release repository\n# MAVEN_MIRROR_URL: the maven mirror repository\n# SONAR_INSTANCE_NAME: the name of the SonarQube instance\n# SONAR_SERVER_URL: the url of the SonarQube server\n# SONAR_USER_ID: SonarQube user name\n# SONAR_USER_TOKEN: SonarQube password or authentication token\n# The settings.xml is available in $HOME/.m2/settings.xml\n# The name of the snapshots repository is 'snapshots'\n# The name of the release repository is 'releases'\n# The name of the mirror repository is 'central'\n\nmvn -B clean package \n#mvn -DaltDeploymentRepository=snapshots::default::${MAVEN_SNAPSHOT_URL} deploy\n",
            "label_key": "BUILD_COMMAND_KEY",
            "desc_key": "BUILD_COMMAND_DESC"
        },
        {
            "name": "WORKING_DIR",
            "type": "Text",
            "required": false,
            "default_value": "",
            "label_key": "WORKING_DIR_KEY",
            "desc_key": "WORKING_DIR_DESC"
        },
        {
            "name": "ARCHIVE_DIR",
            "type": "Text",
            "required": false,
            "default_value": "",
            "label_key": "ARCHIVE_DIR_KEY",
            "desc_key": "ARCHIVE_DIR_DESC"
        }
    ],
    "outputs": [
        {
            "type": "Artifacts",
            "inclusion" : "always"
        }
    ],
    "execution": {
        "type": "JenkinsDocker",
        "shell": "#!/bin/bash
set +x
set +e

export TOOLCHAIN_TOKEN PIPELINE_TOOLCHAIN_ID
export SERVICE_INSTANCE=\"#SERVICE_INSTANCE#\"
export SERVICE_INSTANCE_TYPE=\"#SERVICE_INSTANCE_TYPE#\"
export TMP_ARCHIVE_DIR=\"#ARCHIVE_DIR#\"
export TMP_WORKING_DIR=\"#WORKING_DIR#\"
export SONAR_SERVICE_INSTANCE=\"#SONAR_SERVICE_INSTANCE#\"

. $EXT_DIR/_init.sh

# get toolchain services
$EXT_DIR/get-service-instances.sh
if [ $? -ne 0 ]; then
    echo \"Failed to load toolchain\"
    exit 1
fi

# generate sonar environment variables from #SONAR_SERVICE_INSTANCE# service instance
node $EXT_DIR/generate-sonar-env.js >/tmp/sonar.txt
if [ ! -s /tmp/sonar.txt ]; then
    echo \"Warning, no sonarqube card available\"
else
. /tmp/sonar.txt
fi

#generate Maven environment variables from #SERVICE_INSTANCE_TYPE# service instance
node $EXT_DIR/generate-maven-env.js >/tmp/maven.txt
if [ ! -s /tmp/maven.txt ]; then
    echo \"Warning, no maven #SERVICE_INSTANCE_TYPE# card available\"
else
. /tmp/maven.txt
fi

#create $SETTINGS_FILE file
$EXT_DIR/create-settings.sh

#set up directories
export ARCHIVE_DIR=.
if [ ! -z \"$TMP_ARCHIVE_DIR\" ]; then
    export ARCHIVE_DIR=\"$TMP_ARCHIVE_DIR\"
fi
if [ ! -z \"$TMP_WORKING_DIR\" ]; then
    cd \"$TMP_WORKING_DIR\"
fi

#BUILD_COMMAND#
if [ $? -ne 0 ]; then
    echo \"Failed during execution of build command\"
    exit 1
fi

# check the contents of the report-task.txt file generated by sonar
if [ -s target/sonar/report-task.txt ]; then
# there is a sonarqube report to process
rm -f /tmp/sonarqualitygates.txt
# install the node app to check the last task result
export CURRENT_DIR=`pwd`
cd $EXT_DIR
# need to be in EXT_DIR to get the package.json file
npm install
cd $CURRENT_DIR
if [ ! -z \"$SONAR_USER_TOKEN\" ]; then
if [ -z \"$SONAR_USER_ID\" ]; then
# user token
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt \"$SONAR_USER_TOKEN:\" > /tmp/sonarqualitygates.txt
else
#user login/password
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt \"$SONAR_USER_ID:$SONAR_USER_TOKEN\" > /tmp/sonarqualitygates.txt
fi
else
#no authentication
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt > /tmp/sonarqualitygates.txt
fi

if [ -s /tmp/sonarqualitygates.txt ]; then
. /tmp/sonarqualitygates.txt

if [ \"$SONARQUBE_RESULT\" == \"FAILED\" ]; then
    echo \"Quality gate check failed\"
    exit 1
else
    echo \"Quality gate check passed\"
fi
else
echo \"No file /tmp/sonarqualitygates.txt\"
fi
else
echo \"Could not find the report-task.txt file\"
fi

"
    }
    },
    "project": "https://hub.jazz.net/project/idsorg/otc-cti-broker",
    "project_contact": "olivier_thomann@ca.ibm.com"
}
